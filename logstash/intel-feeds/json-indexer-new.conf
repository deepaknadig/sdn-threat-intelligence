input {
  file {
    type => "json"
    path => "/home/ubuntu/intel/feeds/json/*"
    sincedb_path => "/var/tmp/.sincedb_test"
    # sincedb_path => "/dev/null"
    exclude => "*.py"
    start_position => "beginning"
  }
}

filter {
  json {
    source => "message"
  }

  if [Event][Object] {
    mutate {
      remove_field => [ "[Event][Object]" ]
    }
  }

  if [Event][Attribute] {

    split {
      field => "[Event][Attribute]"
    }

    mutate {
      rename => {
          "[Event][info]" => "intel-source"
          "[Event][analysis]" => "intel-analysis"
          "[Event][Attribute][comment]" => "comments"
          "[Event][Attribute][category]" => "intel-category"
          "[Event][Attribute][uuid]" => "intel-uuid"
          "[Event][Attribute][timestamp]" => "intel-timestamp"
          "[Event][Attribute][to_ids]" => "exportable_to_ids"
          "[Event][Attribute][value]" => "intel-value"
          "[Event][Attribute][type]" => "intel_type"
          "[Event][threat_level_id]" => "threat_level_id"
      }

      convert => {
        "intel-analysis" => "integer"
        "threat_level_id" => "integer"
      }

    remove_field => [ "[message]", "[Event][publish_timestamp]", "[Event][timestamp]",
                      "[Event][Tag]", "[Event][Object]", "[Event][published]",
                      "[Event][date]", "[Event][Orgc]", "[Event][uuid]",
                      "[Event][Attribute][object_relation]", "[Event]"
                    ]
    }

    date {
      match => [ "intel-timestamp", "UNIX" ]
      target => "intel-timestamp"
    }

    translate {
      field => "intel-analysis"
      destination => "intel-analysis-code"
      dictionary => [
          "0", "Initial",
          "1", "Ongoing",
          "2", "Complete"
      ]
    }

    translate {
      field => "threat_level_id"
      destination => "threat_level_code"
      dictionary => [
          "1", "High",
          "2", "Medium",
          "3", "Low",
          "4", "Undefined"
      ]
    }

    grok {
      match => { "intel-value" => "%{IP:intel-ip}"}
      tag_on_failure => [ ]
    }

    # add geoip attributes
    geoip {
      source => "intel-ip"
      tag_on_failure => [ ]
    }

    # Fingerprinting to remove duplicates
    fingerprint {
      concatenate_sources => true
      source => ["intel_type", "intel-value"]
      target => "[@metadata][fingerprint]"
      method => "MURMUR3"
    }

  } # <--- End IF

  if "_jsonparsefailure" in [tags] {
    drop { }
  }
}

output {
stdout { codec => rubydebug }
elasticsearch {
    hosts => localhost
    document_id => "%{[@metadata][fingerprint]}"
    index => "json-%{+YYYY.MM.dd}"
}
}

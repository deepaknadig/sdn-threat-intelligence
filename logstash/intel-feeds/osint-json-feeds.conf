input {
  file {
    type => "json"
    # max_open_files => 65536
    codec => "json"
    path => "/home/ubuntu/intel/json2/*"
    sincedb_path => "/var/tmp/.sincedb_threats"
    # sincedb_path => "/dev/null"
    # exclude => "*.py"
    start_position => "beginning"
  }
}

filter {
  split {
    field => "[Events]"
  }

  mutate {
    add_field => { "occurrences" => 1 }
  }

  mutate {
    rename => {"[Events][comments]" => "comments"}
    rename => {"[Events][exportable-to-ids]" => "exportable-to-ids"}
    rename => {"[Events][threat-analysis]" => "threat-analysis"}
    rename => {"[Events][threat-category]" => "threat-category"}
    rename => {"[Events][threat-organization]" => "threat-organization"}
    rename => {"[Events][threat-published]" => "threat-published"}
    rename => {"[Events][threat-source]" => "threat-source"}
    rename => {"[Events][threat-timestamp]" => "threat-timestamp"}
    rename => {"[Events][timestamp]" => "timestamp"}
    rename => {"[Events][threat-level-id]" => "threat-level-id"}
    rename => {"[Events][threat-uuid]" => "threat-uuid"}

    # Threat Data
    rename => {"[Events][threat-data]" => "threat-data"}


    convert => {
      "threat-analysis" => "integer"
      "threat-level-id" => "integer"
      "threat-has-types" => "boolean"
      "[threat-data][has-types]" => "boolean"
      "[threat-data][has-meta]" => "boolean"
      "[threat-data][is-extended]" => "boolean"
      "occurrences" => "integer"
    }

    # Add Tag(s)
    add_tag => [ "misp_daily_updates" ]

    # Remove unused field(s)
    remove_field => [ "[Events]" ]
    remove_field => [ "[Events][object_relation]" ]

  }

  # Translations for Codes and Analysis
  translate {
    field => "threat-analysis"
    destination => "threat-analysis-code"
    dictionary => [
        "0", "Initial",
        "1", "Ongoing",
        "2", "Complete"
    ]
  }

  translate {
    field => "threat-level-id"
    destination => "threat-level-code"
    dictionary => [
        "1", "High",
        "2", "Medium",
        "3", "Low",
        "4", "Undefined"
    ]
  }

  # Handle Date Objects
  date {
    match => [ "threat-timestamp", "UNIX" ]
    target => "threat-timestamp"
  }

  date {
    match => [ "timestamp", "UNIX" ]
    target => "timestamp"
  }

  # Parse IP for GeoIP coordinates
  # Adds an additional "threat-ip" field
  grok {
    match => { "[threat-data][value1]" => "%{IP:threat-geoip}" }
    tag_on_failure => [ ]
  }

  geoip {
    source => "threat-geoip"
    database => "/home/ubuntu/GeoLite2-ASN_20190528/GeoLite2-ASN.mmdb"
    tag_on_failure => [ ]
  }

  geoip {
    source => "threat-geoip"
    tag_on_failure => [ ]
  }


  # Fingerprinting to remove duplicates
  fingerprint {
    concatenate_sources => true
    source => ["[threat-data][type1]", "[threat-data][value1]"]
    target => "[@metadata][fingerprint]"
    method => "MURMUR3"
  }

  if "_jsonparsefailure" in [tags] {
    drop { }
  }
}

output {
  stdout { codec => rubydebug }
  elasticsearch {
    hosts => localhost
    action => "update"
    doc_as_upsert => true
#    manage_template => true
    script => "if (ctx._source.occurrences != null) {ctx._source.occurrences++}"
    # Replace "document_id" with "fingerprint"
    document_id => "%{[@metadata][fingerprint]}"
    index => "threats"
  }
}

#######################################################################################################################
# This file provides a feed-specific template for indexing threats.
#
# The "filter" section defines all the fields required by the threat intelligence index. Additional
# pre-processing of the feeds may be necessary to conform to the standard format of the repository.
#
# Uncomment the "input", "filter" and "output" sections to create a feed indexer.
#######################################################################################################################

# The input section
input {
  file {
    add_field => { "[@metadata][source_type]" => "feed-name" }
    path => "/path/to/file/or/directory"
    sincedb_path => "/var/tmp/.sincedb_threats"
    start_position => "beginning"
}

}

# The filter section
filter {

  mutate {
    add_field => { "occurrences" => 1 }
    add_field => { "comments" => "" }
    add_field => { "exportable-to-ids" => "true" }
    add_field => { "threat-analysis" => "2" }
    add_field => { "threat-category" => "" }
    add_field => { "threat-level-id" => "" }
    add_field => { "threat-organization" => "" }
    add_field => { "threat-published" => "true" }
    add_field => { "threat-source" => "" }
    add_field => { "threat-timestamp" => "" }
    add_field => { "timestamp" => "" }
    add_field => { "threat-uuid" => "" }

    # Threat Data
    add_field => { "[threat-data][has-types]" => "false" }
    add_field => { "[threat-data][has-meta]" => "false" }
    add_field => { "[threat-data][is-extended]" => "false" }
    add_field => { "[threat-data][type1]" => "" }
    add_field => { "[threat-data][sub-type1]" => "" }
    add_field => { "[threat-data][meta1]" => "" }
    add_field => { "[threat-data][value1]" => "" }
    add_field => { "[threat-data][type2]" => "" }
    add_field => { "[threat-data][sub-type2]" => "" }
    add_field => { "[threat-data][meta2]" => "" }
    add_field => { "[threat-data][value2]" => "" }

    convert => {
      "threat-analysis" => "integer"
      "threat-level-id" => "integer"
      "threat-has-types" => "boolean"
      "[threat-data][has-types]" => "boolean"
      "[threat-data][has-meta]" => "boolean"
      "[threat-data][is-extended]" => "boolean"
      "occurrences" => "integer"
    }

    # Add Tag(s)
    add_tag => [ "ext_feed_updates" ]

  }

  mutate {
    add_field => { "occurrences" => 1 }
  }

  # Translations for Codes and Analysis
  translate {
    field => "threat-analysis"
    destination => "threat-analysis-code"
    dictionary => [
        "0", "Initial",
        "1", "Ongoing",
        "2", "Complete"
    ]
  }

  translate {
    field => "threat-level-id"
    destination => "threat-level-code"
    dictionary => [
        "1", "High",
        "2", "Medium",
        "3", "Low",
        "4", "Undefined"
    ]
  }

  # Handle Date Objects
  date {
    match => [ "threat-timestamp", "UNIX" ]
    target => "threat-timestamp"
  }

  date {
    match => [ "timestamp", "UNIX" ]
    target => "timestamp"
  }

  # Parse IP for GeoIP coordinates
  # Adds an additional "threat-ip" field
  grok {
    match => { "[Events][threat-data][value1]" => "%{IP:[Events][threat-data][value1]}"}
    tag_on_failure => [ ]
  }

  geoip {
    source => "[Events][threat-data][value1]"
    tag_on_failure => [ ]
  }

  # Fingerprinting to remove duplicates
  fingerprint {
    concatenate_sources => true
    source => ["[threat-data][type1]", "[threat-data][value1]"]
    target => "[@metadata][fingerprint]"
    method => "MURMUR3"
  }

  if "_jsonparsefailure" in [tags] {
    drop { }
  }
}

# The output section
output {
  stdout {
    codec => rubydebug
    }

  elasticsearch {
    hosts => localhost
    document_id => "%{[@metadata][fingerprint]}"
    index => "threats"
    }
}
